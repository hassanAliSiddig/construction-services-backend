// <auto-generated />
using System;
using ConstructionApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConstructionApi.Migrations.ConstructionDb
{
    [DbContext(typeof(ConstructionDbContext))]
    [Migration("20230220173419_Modified Payment Model")]
    partial class ModifiedPaymentModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("ConstructionApi.Models.Client", b =>
                {
                    b.Property<long>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientID = 1L,
                            AddedBy = "",
                            AddedOn = new DateTime(2023, 2, 20, 17, 34, 19, 373, DateTimeKind.Utc).AddTicks(8358),
                            ChangedBy = "",
                            ChangedOn = new DateTime(2023, 2, 20, 17, 34, 19, 373, DateTimeKind.Utc).AddTicks(8362),
                            Email = "john.smith@example.com",
                            EntityStatus = 1,
                            Name = "John Smith",
                            Phone = "555-1234",
                            UserID = 2L
                        },
                        new
                        {
                            ClientID = 2L,
                            AddedBy = "",
                            AddedOn = new DateTime(2023, 2, 20, 17, 34, 19, 373, DateTimeKind.Utc).AddTicks(9808),
                            ChangedBy = "",
                            ChangedOn = new DateTime(2023, 2, 20, 17, 34, 19, 373, DateTimeKind.Utc).AddTicks(9808),
                            Email = "jane.doe@example.com",
                            EntityStatus = 1,
                            Name = "Jane Doe",
                            Phone = "555-5678",
                            UserID = 3L
                        });
                });

            modelBuilder.Entity("ConstructionApi.Models.Company", b =>
                {
                    b.Property<long>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyID = 1L,
                            AddedBy = "",
                            AddedOn = new DateTime(2023, 2, 20, 17, 34, 19, 374, DateTimeKind.Utc).AddTicks(100),
                            Address = "123 Main Street",
                            ChangedBy = "",
                            ChangedOn = new DateTime(2023, 2, 20, 17, 34, 19, 374, DateTimeKind.Utc).AddTicks(100),
                            Email = "info@abccompany.com",
                            EntityStatus = 1,
                            Name = "ABC Company",
                            Phone = "050-555-1234"
                        },
                        new
                        {
                            CompanyID = 2L,
                            AddedBy = "",
                            AddedOn = new DateTime(2023, 2, 20, 17, 34, 19, 374, DateTimeKind.Utc).AddTicks(1288),
                            Address = "456 Maple Avenue",
                            ChangedBy = "",
                            ChangedOn = new DateTime(2023, 2, 20, 17, 34, 19, 374, DateTimeKind.Utc).AddTicks(1288),
                            Email = "info@xyzcompany.com",
                            EntityStatus = 1,
                            Name = "XYZ Company",
                            Phone = "050-555-5678"
                        });
                });

            modelBuilder.Entity("ConstructionApi.Models.ConstructionRequest", b =>
                {
                    b.Property<long>("ConstructionRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("TEXT");

                    b.Property<long>("ClientID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EstimatedEndDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("PaymentID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("StatusID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConstructionRequestID");

                    b.HasIndex("ClientID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PaymentID")
                        .IsUnique();

                    b.HasIndex("ProjectID");

                    b.HasIndex("StatusID");

                    b.ToTable("ConstructionRequests");
                });

            modelBuilder.Entity("ConstructionApi.Models.ConstructionRequestStatus", b =>
                {
                    b.Property<long>("ConstructionRequestStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ConstructionRequestStatusID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ConstructionRequestStatuses");

                    b.HasData(
                        new
                        {
                            ConstructionRequestStatusID = 1L,
                            Name = "Submitted"
                        },
                        new
                        {
                            ConstructionRequestStatusID = 2L,
                            Name = "Pending Payment"
                        },
                        new
                        {
                            ConstructionRequestStatusID = 3L,
                            Name = "Payment Successful"
                        },
                        new
                        {
                            ConstructionRequestStatusID = 4L,
                            Name = "In Progress"
                        },
                        new
                        {
                            ConstructionRequestStatusID = 5L,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("ConstructionApi.Models.Payment", b =>
                {
                    b.Property<long>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<long?>("AuthCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaymentID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ConstructionApi.Models.Project", b =>
                {
                    b.Property<long>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EstimatedCompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("StatusID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectID");

                    b.HasIndex("StatusID");

                    b.ToTable("projects");

                    b.HasData(
                        new
                        {
                            ProjectID = 1L,
                            AddedBy = "",
                            AddedOn = new DateTime(2023, 2, 20, 17, 34, 19, 374, DateTimeKind.Utc).AddTicks(3045),
                            Address = "123 Al Khan Street",
                            ChangedBy = "",
                            ChangedOn = new DateTime(2023, 2, 20, 17, 34, 19, 374, DateTimeKind.Utc).AddTicks(3045),
                            Description = "This is the first project",
                            EntityStatus = 1,
                            EstimatedCompletionDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grand Mall",
                            StartDate = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusID = 1L
                        },
                        new
                        {
                            ProjectID = 2L,
                            AddedBy = "",
                            AddedOn = new DateTime(2023, 2, 20, 17, 34, 19, 374, DateTimeKind.Utc).AddTicks(4808),
                            Address = "123 Al Emarat Street",
                            ChangedBy = "",
                            ChangedOn = new DateTime(2023, 2, 20, 17, 34, 19, 374, DateTimeKind.Utc).AddTicks(4809),
                            Description = "This is the second project",
                            EntityStatus = 1,
                            EstimatedCompletionDate = new DateTime(2026, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Al Madina Tower",
                            StartDate = new DateTime(2023, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusID = 1L
                        });
                });

            modelBuilder.Entity("ConstructionApi.Models.ProjectStatus", b =>
                {
                    b.Property<long>("ProjectStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectStatusID");

                    b.ToTable("ProjectStatuses");

                    b.HasData(
                        new
                        {
                            ProjectStatusID = 1L,
                            Name = "In Progress"
                        },
                        new
                        {
                            ProjectStatusID = 2L,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("ConstructionApi.Models.ConstructionRequest", b =>
                {
                    b.HasOne("ConstructionApi.Models.Client", "Client")
                        .WithMany("ConstructionRequests")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionApi.Models.Company", "Company")
                        .WithMany("ConstructionRequests")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionApi.Models.Payment", "Payment")
                        .WithOne("ConstructionRequest")
                        .HasForeignKey("ConstructionApi.Models.ConstructionRequest", "PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionApi.Models.Project", "Project")
                        .WithMany("ConstructionRequests")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionApi.Models.ConstructionRequestStatus", "Status")
                        .WithMany("ConstructionRequests")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("Payment");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ConstructionApi.Models.Project", b =>
                {
                    b.HasOne("ConstructionApi.Models.ProjectStatus", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ConstructionApi.Models.Client", b =>
                {
                    b.Navigation("ConstructionRequests");
                });

            modelBuilder.Entity("ConstructionApi.Models.Company", b =>
                {
                    b.Navigation("ConstructionRequests");
                });

            modelBuilder.Entity("ConstructionApi.Models.ConstructionRequestStatus", b =>
                {
                    b.Navigation("ConstructionRequests");
                });

            modelBuilder.Entity("ConstructionApi.Models.Payment", b =>
                {
                    b.Navigation("ConstructionRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("ConstructionApi.Models.Project", b =>
                {
                    b.Navigation("ConstructionRequests");
                });

            modelBuilder.Entity("ConstructionApi.Models.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
